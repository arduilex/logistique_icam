#!/usr/bin/env python
"""Script pour cr√©er des donn√©es avec variations de stock r√©alistes entre janvier et juin 2025"""

from decimal import Decimal
import random
from datetime import datetime, timedelta
from inventory.models import Product, Order, OrderItem, Transaction

def clear_database():
    """Vide la base de donn√©es"""
    print("üóëÔ∏è  Nettoyage de la base de donn√©es...")
    Transaction.objects.all().delete()
    OrderItem.objects.all().delete()
    Order.objects.all().delete()
    Product.objects.all().delete()
    print("‚úÖ Base de donn√©es nettoy√©e")

def create_products():
    """Cr√©e une s√©lection de produits avec stocks initiaux"""
    print("üì¶ Cr√©ation des produits...")
    
    products_data = [
        {"name": "Moteur √©lectrique 3kW", "reference": "MOT-3KW-001", "price": 450.00, "initial_stock": 50, "min_stock": 10},
        {"name": "Capteur de temp√©rature Pt100", "reference": "CAPT-PT100-01", "price": 125.00, "initial_stock": 80, "min_stock": 15},
        {"name": "V√©rin pneumatique √ò32", "reference": "VER-32-50", "price": 68.00, "initial_stock": 120, "min_stock": 25},
        {"name": "Contacteur 25A", "reference": "CONT-25A-001", "price": 32.80, "initial_stock": 200, "min_stock": 40},
        {"name": "Roulement √† billes 6204", "reference": "ROUL-6204-2RS", "price": 12.50, "initial_stock": 300, "min_stock": 50},
        {"name": "√âlectrovanne 5/2", "reference": "EV-5-2-G14", "price": 95.00, "initial_stock": 60, "min_stock": 12},
        {"name": "Transformateur 220V/24V", "reference": "TRANS-220-24", "price": 89.50, "initial_stock": 90, "min_stock": 20},
        {"name": "Projecteur LED 50W", "reference": "PROJ-LED-50W", "price": 89.00, "initial_stock": 75, "min_stock": 15},
        {"name": "D√©tecteur de proximit√©", "reference": "DET-PROX-IND", "price": 35.00, "initial_stock": 150, "min_stock": 30},
        {"name": "Vanne √† boisseau DN25", "reference": "VAN-BOIS-25", "price": 45.00, "initial_stock": 100, "min_stock": 20},
    ]
    
    products = []
    for data in products_data:
        product = Product.objects.create(
            name=data["name"],
            reference=data["reference"],
            description=f"Description du produit {data['name']}",
            quantity=data["initial_stock"],
            price=Decimal(str(data["price"])),
            min_stock_level=data["min_stock"],
            created_at=datetime(2024, 12, 15)  # Cr√©√© en d√©cembre 2024
        )
        products.append(product)
        print(f"  ‚úì {product.name} - Stock initial: {data['initial_stock']}")
    
    print(f"‚úÖ {len(products)} produits cr√©√©s")
    return products

def generate_realistic_transactions(products):
    """G√©n√®re des transactions r√©alistes entre janvier et juin 2025"""
    print("üìà G√©n√©ration des transactions avec variations r√©alistes...")
    
    # P√©riode de janvier √† juin 2025
    start_date = datetime(2025, 1, 1)
    end_date = datetime(2025, 6, 30)
    
    # Fournisseurs et clients
    suppliers = ["SCHNEIDER", "SIEMENS", "FESTO", "PARKER", "SKF"]
    customers = ["RENAULT", "AIRBUS", "SANOFI", "MICHELIN", "TOTAL"]
    
    # Compteurs pour les num√©ros de commande
    achat_counter = 1
    vente_counter = 1
    
    # Pour chaque produit, g√©n√©rer un historique r√©aliste
    for product in products:
        print(f"  üìä G√©n√©ration pour {product.name}")
        
        # Stock de d√©part (on remet √† z√©ro pour recalculer)
        current_stock = product.quantity
        product.quantity = 0
        product.save()
        
        # Premi√®re transaction: stock initial le 1er janvier
        Transaction.objects.create(
            product=product,
            transaction_type='IN',
            quantity=current_stock,
            unit_price=product.price,
            notes="Stock initial 2025",
            timestamp=start_date
        )
        product.quantity = current_stock
        product.save()
        
        # G√©n√©rer des transactions sur 6 mois
        current_date = start_date
        
        while current_date <= end_date:
            # Probabilit√© d'avoir une transaction ce jour-l√†
            if random.random() < 0.15:  # 15% de chance par jour
                
                # Type de transaction bas√© sur le niveau de stock
                if product.quantity <= product.min_stock_level * 1.5:
                    # Stock faible -> plus de chances d'achat
                    transaction_type = 'IN' if random.random() < 0.8 else 'OUT'
                elif product.quantity >= product.min_stock_level * 4:
                    # Stock √©lev√© -> plus de chances de vente
                    transaction_type = 'OUT' if random.random() < 0.7 else 'IN'
                else:
                    # Stock normal -> √©quilibr√©
                    transaction_type = random.choice(['IN', 'OUT'])
                
                if transaction_type == 'IN':
                    # Entr√©e de stock (achat)
                    quantity = random.randint(10, 50)
                    
                    # Cr√©er une commande d'achat
                    order = Order.objects.create(
                        order_number=f"ACH-2025-{str(achat_counter).zfill(3)}",
                        order_type='IN',
                        status='DELIVERED',
                        supplier_customer=random.choice(suppliers),
                        order_date=current_date,
                        notes="R√©approvisionnement"
                    )
                    achat_counter += 1
                    
                    OrderItem.objects.create(
                        order=order,
                        product=product,
                        quantity=quantity,
                        unit_price=product.price
                    )
                    
                    Transaction.objects.create(
                        product=product,
                        transaction_type='IN',
                        quantity=quantity,
                        unit_price=product.price,
                        notes=f"Achat - {order.order_number}",
                        timestamp=current_date
                    )
                    
                    # Mettre √† jour le stock
                    product.quantity += quantity
                    product.save()
                    
                elif transaction_type == 'OUT':
                    # Sortie de stock (vente) - s'assurer de ne pas descendre sous 0
                    max_quantity = min(product.quantity, random.randint(5, 30))
                    if max_quantity > 0:
                        quantity = random.randint(1, max_quantity)
                        
                        # Cr√©er une commande de vente
                        order = Order.objects.create(
                            order_number=f"VTE-2025-{str(vente_counter).zfill(3)}",
                            order_type='OUT',
                            status='DELIVERED',
                            supplier_customer=random.choice(customers),
                            order_date=current_date,
                            notes="Vente client"
                        )
                        vente_counter += 1
                        
                        OrderItem.objects.create(
                            order=order,
                            product=product,
                            quantity=quantity,
                            unit_price=product.price * Decimal('1.2')  # Marge
                        )
                        
                        Transaction.objects.create(
                            product=product,
                            transaction_type='OUT',
                            quantity=quantity,  # Positif dans Transaction, la logique de soustraction est dans save()
                            unit_price=product.price * Decimal('1.2'),
                            notes=f"Vente - {order.order_number}",
                            timestamp=current_date
                        )
                        
                        # Mettre √† jour le stock
                        product.quantity -= quantity
                        product.save()
            
            # Avancer d'un jour
            current_date += timedelta(days=1)
        
        print(f"    ‚úì Stock final: {product.quantity}")

def add_some_adjustments(products):
    """Ajoute quelques ajustements d'inventaire"""
    print("‚öñÔ∏è  Ajout d'ajustements d'inventaire...")
    
    for _ in range(8):
        product = random.choice(products)
        # Ajustement entre -10 et +15, mais sans jamais faire descendre sous 0
        max_negative = -min(10, product.quantity)
        adjustment = random.randint(max_negative, 15)
        
        if adjustment != 0:
            Transaction.objects.create(
                product=product,
                transaction_type='ADJUSTMENT',
                quantity=adjustment,
                unit_price=None,
                notes="Correction inventaire",
                timestamp=datetime(2025, random.randint(2, 5), random.randint(1, 28))
            )
            
            # Mettre √† jour le stock
            product.quantity += adjustment
            product.save()
            
            print(f"  ‚úì Ajustement {product.name}: {adjustment:+d} (nouveau stock: {product.quantity})")

def main():
    """Fonction principale"""
    print("üè≠ G√âN√âRATION DE DONN√âES R√âALISTES - JANVIER √Ä JUIN 2025")
    print("=" * 65)
    
    # Vider la base
    clear_database()
    
    # Cr√©er les produits
    products = create_products()
    
    # G√©n√©rer les transactions r√©alistes
    generate_realistic_transactions(products)
    
    # Ajouter quelques ajustements
    add_some_adjustments(products)
    
    print("\n" + "=" * 65)
    print("üéâ DONN√âES R√âALISTES G√âN√âR√âES AVEC SUCC√àS !")
    print(f"üìä Statistiques finales:")
    print(f"   ‚Ä¢ {Product.objects.count()} produits")
    print(f"   ‚Ä¢ {Order.objects.count()} commandes")
    print(f"   ‚Ä¢ {OrderItem.objects.count()} articles de commande")
    print(f"   ‚Ä¢ {Transaction.objects.count()} transactions")
    
    print(f"\nüìà √âtat des stocks:")
    for product in products:
        status = "üî¥" if product.quantity == 0 else "üü°" if product.quantity <= product.min_stock_level else "üü¢"
        print(f"   {status} {product.name}: {product.quantity} unit√©s")
    
    print("\nüåê Les graphiques d'√©volution devraient maintenant montrer des variations r√©alistes !")

if __name__ == "__main__":
    main()