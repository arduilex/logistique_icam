#!/usr/bin/env python
"""Script pour ajouter 100 commandes entre 2023 et 2025 avec des donn√©es r√©alistes"""

import os
import sys
import django
from decimal import Decimal
import random
from datetime import datetime, timedelta

# Configuration Django
sys.path.append('/home/alex/dev/claude-code/stock')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'stock.settings')
django.setup()

from inventory.models import Product, Order, OrderItem, Transaction
from django.utils import timezone

def generate_random_date(start_year=2023, end_year=2025):
    """G√©n√®re une date al√©atoire entre start_year et end_year"""
    start_date = datetime(start_year, 1, 1)
    end_date = datetime(end_year, 12, 31)
    
    time_between = end_date - start_date
    days_between = time_between.days
    random_days = random.randrange(days_between)
    
    random_date = start_date + timedelta(days=random_days)
    return timezone.make_aware(random_date)

def create_advanced_sales_data():
    """Cr√©e 100 commandes avec des donn√©es r√©alistes sur 3 ans"""
    
    print("üè≠ Cr√©ation de 100 commandes avanc√©es (2023-2025)")
    print("=" * 60)
    
    # R√©cup√©rer tous les produits
    products = list(Product.objects.all())
    if not products:
        print("‚ùå Aucun produit trouv√© ! Veuillez d'abord peupler la base avec des produits.")
        return
    
    print(f"üì¶ {len(products)} produits disponibles")
    
    # Listes de fournisseurs et clients r√©alistes
    suppliers = [
        "SCHNEIDER ELECTRIC FRANCE",
        "SIEMENS INDUSTRY",
        "FESTO PNEUMATIC",
        "PARKER HANNIFIN CORP",
        "SKF ROULEMENTS",
        "SICK SENSORS",
        "PHOENIX CONTACT",
        "LEGRIS AUTOMATION",
        "ABB FRANCE",
        "OMRON ELECTRONICS",
        "MITSUBISHI ELECTRIC",
        "ROCKWELL AUTOMATION",
        "EATON MOELLER",
        "BOSCH REXROTH",
        "VICKERS HYDRAULICS"
    ]
    
    clients = [
        "RENAULT TRUCKS",
        "AIRBUS HELICOPTERS",
        "SANOFI AVENTIS",
        "MICHELIN TYRES",
        "TOTAL ENERGIES",
        "ARCELORMITTAL",
        "SAFRAN AIRCRAFT",
        "THALES DEFENSE",
        "PSA PEUGEOT CITRO√ãN",
        "ALSTOM TRANSPORT",
        "DASSAULT AVIATION",
        "VALEO AUTOMOTIVE",
        "SCHNEIDER AUTOMATION",
        "VALLOUREC TUBES",
        "AIR LIQUIDE",
        "BOUYGUES CONSTRUCTION",
        "VINCI ENERGIES",
        "SPIE BATIGNOLLES",
        "EIFFAGE METAL",
        "TECHNIP ENERGIES"
    ]
    
    # Nettoyer les anciennes donn√©es de test
    print("üóëÔ∏è  Nettoyage des anciennes commandes de test...")
    Order.objects.filter(order_number__startswith='TEST-').delete()
    Transaction.objects.filter(notes__contains='Test automatique').delete()
    
    # Compteurs
    orders_created = 0
    total_items = 0
    total_transactions = 0
    
    # Cr√©er 60 commandes d'achat et 40 commandes de vente
    for i in range(100):
        # 60% d'achats, 40% de ventes
        is_purchase = i < 60
        order_type = 'IN' if is_purchase else 'OUT'
        
        # G√©n√©rer une date al√©atoire
        order_date = generate_random_date()
        
        # Num√©ro de commande avec pr√©fixe TEST pour identification
        if is_purchase:
            order_number = f"TEST-ACH-{order_date.year}-{str(i+1).zfill(3)}"
            company = random.choice(suppliers)
        else:
            order_number = f"TEST-VTE-{order_date.year}-{str(i+1).zfill(3)}"
            company = random.choice(clients)
        
        # Statut selon la date (plus ancien = plus de chance d'√™tre livr√©)
        days_ago = (timezone.now() - order_date).days
        if days_ago > 365:  # Plus d'un an
            status = 'DELIVERED'
        elif days_ago > 30:  # Plus d'un mois
            status = random.choice(['DELIVERED', 'DELIVERED', 'CONFIRMED'])
        else:  # R√©cent
            status = random.choice(['DELIVERED', 'CONFIRMED', 'PENDING'])
        
        # Cr√©er la commande
        order = Order.objects.create(
            order_number=order_number,
            order_type=order_type,
            status=status,
            supplier_customer=company,
            order_date=order_date,
            notes=f"Commande de test automatique - {order_date.year}"
        )
        
        # Ajouter 1 √† 4 produits par commande
        nb_products = random.randint(1, 4)
        selected_products = random.sample(products, min(nb_products, len(products)))
        
        order_items_created = 0
        
        for product in selected_products:
            # Quantit√© selon le type de produit
            if 'Roulement' in product.name or 'Joint' in product.name:
                # Petites pi√®ces : quantit√©s importantes
                quantity = random.randint(10, 100)
            elif 'Moteur' in product.name or 'Pompe' in product.name or 'Automate' in product.name:
                # √âquipements lourds : petites quantit√©s
                quantity = random.randint(1, 5)
            else:
                # Autres : quantit√©s moyennes
                quantity = random.randint(2, 20)
            
            # Prix avec variation al√©atoire (-10% √† +15%)
            price_variation = random.uniform(0.9, 1.15)
            if is_purchase:
                # Prix d'achat
                unit_price = product.price * Decimal(str(price_variation))
            else:
                # Prix de vente avec marge (20% √† 40%)
                margin = random.uniform(1.2, 1.4)
                unit_price = product.price * Decimal(str(price_variation * margin))
            
            # Cr√©er l'article de commande
            order_item = OrderItem.objects.create(
                order=order,
                product=product,
                quantity=quantity,
                unit_price=unit_price
            )
            
            order_items_created += 1
            
            # Cr√©er la transaction si la commande est livr√©e
            if status == 'DELIVERED':
                transaction_quantity = quantity if is_purchase else -quantity
                transaction_type = 'IN' if is_purchase else 'OUT'
                
                # Date de transaction l√©g√®rement apr√®s la commande
                transaction_date = order_date + timedelta(days=random.randint(1, 15))
                
                Transaction.objects.create(
                    product=product,
                    transaction_type=transaction_type,
                    quantity=transaction_quantity,
                    unit_price=unit_price,
                    order_item=order_item,
                    notes=f"Test automatique - {order.order_number}",
                    timestamp=transaction_date
                )
                
                total_transactions += 1
        
        orders_created += 1
        total_items += order_items_created
        
        # Affichage du progr√®s
        if (i + 1) % 20 == 0:
            print(f"  ‚úì {i + 1}/100 commandes cr√©√©es...")
    
    print("\n" + "=" * 60)
    print("üéâ DONN√âES AVANC√âES CR√â√âES AVEC SUCC√àS !")
    print(f"üìä Statistiques finales:")
    print(f"   ‚Ä¢ {orders_created} nouvelles commandes")
    print(f"   ‚Ä¢ {total_items} articles de commande")
    print(f"   ‚Ä¢ {total_transactions} nouvelles transactions")
    
    # Statistiques par ann√©e
    print(f"\nüìÖ R√©partition par ann√©e:")
    for year in [2023, 2024, 2025]:
        count = Order.objects.filter(
            order_number__startswith='TEST-',
            order_date__year=year
        ).count()
        print(f"   ‚Ä¢ {year}: {count} commandes")
    
    # Statistiques par type
    purchases = Order.objects.filter(order_number__startswith='TEST-ACH-').count()
    sales = Order.objects.filter(order_number__startswith='TEST-VTE-').count()
    print(f"\nüíº R√©partition par type:")
    print(f"   ‚Ä¢ Achats: {purchases} commandes")
    print(f"   ‚Ä¢ Ventes: {sales} commandes")
    
    print(f"\nüåê Vous pouvez maintenant tester les rapports avec des donn√©es r√©alistes !")
    print(f"   ‚Ä¢ Utilisez les filtres de date pour analyser par p√©riode")
    print(f"   ‚Ä¢ Testez les rapports 2023, 2024, 2025")
    print(f"   ‚Ä¢ Analysez l'√©volution des ventes dans le temps")

if __name__ == "__main__":
    create_advanced_sales_data()